#!/bin/sh
# Shell responsável por carregar variáveis com base no ambiente que é passado como parâmetro.

environment=$1

export VAULT_ADDR="https://vault.sicredi.in"                                  # URL do Vault do ambiente
export TF_VAR_vault_method="aws"                                   # Carrega variáveis de perfil para autenticação no Vault
export TF_VAR_vault_path="auth/aws/login"
export TF_VAR_vault_parameters='{role="iac-node", region="sa-east-1", sts_region="sa-east-1"}'
export OS_PROJECT_NAME=$environment
export OS_IDENTITY_API_VERSION=3                                             # Versão da API de autenticação no Openstack
export OS_USER_DOMAIN_NAME="sicredi"                                         # Nome do domínio de usuário do Openstack
export OS_PROJECT_DOMAIN_NAME="sicredi"                                      # Nome do domínio do projeto do ambiente no Openstack
export OS_AUTH_TYPE="v3token"                                                # Método que será utilizado para autenticação no Openstack

case "$environment" in
  # Caso o parametro do ambiente seja "dev"
  # Primeiramente carrega as variáveis necessárias para buscar as credenciais do Openstack autenticando no Vault do ambiente e posteriormente deploy da stack Terraform.
  dev)
    #terraform workspace select -or-create dev > /dev/null 2>&1                  # Selecão da workspace atualmente ocorre na pipeline devido a necessidade de ser executado depois do init.
    #export TF_WORKSPACE="dev"                                                   # Caso a workspace não exista ainda, essa variável de ambiente preenchida não cria a workspace, logo foi passado para a pipeline através de linha de comando pelo mesmo motivo descrito acima.

                                                    # Nome do Projeto Openstack do ambiente
    export OS_AUTH_URL="https://keystone.api.dtu.infra.sicredi.net:5000/v3"      # URL de autenticação no Openstack - API de autenticação


    # Busca o Token temporário para autenticação e deploy no Openstack
    # Primeiramente loga no Vault do ambiente e busca as credenciais do usuário de aplicação criado para o runner
    # Sem carregá-las para variáveis, utiliza-as para gerar um token temporário de autenticação no Openstack e manter a segurança.
    # Para isso, utiliza uma "request" JSON na API com as credenciais do Vault, e filtra o Token que é retornado no HEADER da resposta
    export OS_TOKEN=$( \
              OS_USER_CREDENTIALS=$( \
                 VAULT_TOKEN=$( \
                    vault login -no-store -token-only -address=$VAULT_ADDR -method=aws role=iac-node \
                 ) \
                 vault kv get -format=json -address=$VAULT_ADDR secret/stacks/runner-terraform-openstack | jq -r '.data' \
              ) && \
              curl -i -s -X POST $OS_AUTH_URL/auth/tokens?nocatalog -H "Content-Type: application/json" -d "{ \
                 \"auth\": { \
                    \"identity\": { \
                       \"methods\": [\"password\"], \
                       \"password\": { \
                          \"user\": { \
                             \"domain\": { \
                                \"name\": \"$OS_USER_DOMAIN_NAME\" \
                             }, \
                             \"name\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_id')\", \
                             \"password\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_secret')\" \
                          } \
                       } \
                    } \
                 } \
              }" | \
              grep -i 'X-Subject-Token:' | awk '{print $2}' | tr -d '\r' \
    )

    local AWS_STS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::387009683574:role/DEV-CI-NODES" --role-session-name "Terraform_Session")
    export AWS_ACCESS_KEY_ID=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.AccessKeyId' -r)
    export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SecretAccessKey' -r)
    export AWS_SESSION_TOKEN=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SessionToken' -r)
    ;;
  # Caso o parametro do ambiente seja "uat"
  # Primeiramente carrega as variáveis necessárias para buscar as credenciais do Openstack autenticando no Vault do ambiente e posteriormente deploy da stack Terraform.
  uat)
    export OS_AUTH_URL="https://keystone.api.dtu.infra.sicredi.net:5000/v3"      # URL de autenticação no Openstack - API de autenticação

    # Busca o Token temporário para autenticação e deploy no Openstack
    # Primeiramente loga no Vault do ambiente e busca as credenciais do usuário de aplicação criado para o runner
    # Sem carregá-las para variáveis, utiliza-as para gerar um token temporário de autenticação no Openstack e manter a segurança.
    # Para isso, utiliza uma "request" JSON na API com as credenciais do Vault, e filtra o Token que é retornado no HEADER da resposta
    export OS_TOKEN=$( \
              OS_USER_CREDENTIALS=$( \
                 VAULT_TOKEN=$( \
                    vault login -no-store -token-only -address=$VAULT_ADDR -method=aws role=iac-node \
                 ) \
                 vault kv get -format=json -address=$VAULT_ADDR secret/stacks/runner-terraform-openstack | jq -r '.data' \
              ) && \
              curl -i -s -X POST $OS_AUTH_URL/auth/tokens?nocatalog -H "Content-Type: application/json" -d "{ \
                 \"auth\": { \
                    \"identity\": { \
                       \"methods\": [\"password\"], \
                       \"password\": { \
                          \"user\": { \
                             \"domain\": { \
                                \"name\": \"$OS_USER_DOMAIN_NAME\" \
                             }, \
                             \"name\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_id')\", \
                             \"password\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_secret')\" \
                          } \
                       } \
                    } \
                 } \
              }" | \
              grep -i 'X-Subject-Token:' | awk '{print $2}' | tr -d '\r' \
    )
    local AWS_STS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::548730833675:role/UAT-CI-NODES" --role-session-name "Terraform_Session")
    export AWS_ACCESS_KEY_ID=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.AccessKeyId' -r)
    export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SecretAccessKey' -r)
    export AWS_SESSION_TOKEN=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SessionToken' -r)
    ;;
  # Caso o parametro do ambiente seja "stress"
  # Primeiramente carrega as variáveis necessárias para buscar as credenciais do Openstack autenticando no Vault do ambiente e posteriormente deploy da stack Terraform.
  stress)
    export OS_AUTH_URL="https://keystone.api.dtu.infra.sicredi.net:5000/v3"      # URL de autenticação no Openstack - API de autenticação

    # Busca o Token temporário para autenticação e deploy no Openstack
    # Primeiramente loga no Vault do ambiente e busca as credenciais do usuário de aplicação criado para o runner
    # Sem carregá-las para variáveis, utiliza-as para gerar um token temporário de autenticação no Openstack e manter a segurança.
    # Para isso, utiliza uma "request" JSON na API com as credenciais do Vault, e filtra o Token que é retornado no HEADER da resposta
    export OS_TOKEN=$( \
              OS_USER_CREDENTIALS=$( \
                 VAULT_TOKEN=$( \
                    vault login -no-store -token-only -address=$VAULT_ADDR -method=aws role=iac-node \
                 ) \
                 vault kv get -format=json -address=$VAULT_ADDR secret/stacks/runner-terraform-openstack | jq -r '.data' \
              ) && \
              curl -i -s -X POST $OS_AUTH_URL/auth/tokens?nocatalog -H "Content-Type: application/json" -d "{ \
                 \"auth\": { \
                    \"identity\": { \
                       \"methods\": [\"password\"], \
                       \"password\": { \
                          \"user\": { \
                             \"domain\": { \
                                \"name\": \"$OS_USER_DOMAIN_NAME\" \
                             }, \
                             \"name\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_id')\", \
                             \"password\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_secret')\" \
                          } \
                       } \
                    } \
                 } \
              }" | \
              grep -i 'X-Subject-Token:' | awk '{print $2}' | tr -d '\r' \
    )
    ;;
  # Caso o parametro do ambiente seja "dev"
  # Primeiramente carrega as variáveis necessárias para buscar as credenciais do Openstack autenticando no Vault do ambiente e posteriormente deploy da stack Terraform.
  prd)
    export OS_AUTH_URL="https://keystone.oam.prd.infra.sicredi.net:5000/v3"      # URL de autenticação no Openstack - API de autenticação

    # Busca o Token temporário para autenticação e deploy no Openstack
    # Primeiramente loga no Vault do ambiente e busca as credenciais do usuário de aplicação criado para o runner
    # Sem carregá-las para variáveis, utiliza-as para gerar um token temporário de autenticação no Openstack e manter a segurança.
    # Para isso, utiliza uma "request" JSON na API com as credenciais do Vault, e filtra o Token que é retornado no HEADER da resposta
    export OS_TOKEN=$( \
              OS_USER_CREDENTIALS=$( \
                 VAULT_TOKEN=$( \
                    vault login -no-store -token-only -address=$VAULT_ADDR -method=aws role=iac-node \
                 ) \
                 vault kv get -format=json -address=$VAULT_ADDR secret/stacks/runner-terraform-openstack | jq -r '.data' \
              ) && \
              curl -i -s -X POST $OS_AUTH_URL/auth/tokens?nocatalog -H "Content-Type: application/json" -d "{ \
                 \"auth\": { \
                    \"identity\": { \
                       \"methods\": [\"password\"], \
                       \"password\": { \
                          \"user\": { \
                             \"domain\": { \
                                \"name\": \"$OS_USER_DOMAIN_NAME\" \
                             }, \
                             \"name\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_id')\", \
                             \"password\": \"$(echo $OS_USER_CREDENTIALS | jq -r '.user_secret')\" \
                          } \
                       } \
                    } \
                 } \
              }" | \
              grep -i 'X-Subject-Token:' | awk '{print $2}' | tr -d '\r' \
    )
    local AWS_STS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::825715253232:role/PRD-CI-NODES" --role-session-name "Terraform_Session")
    export AWS_ACCESS_KEY_ID=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.AccessKeyId' -r)
    export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SecretAccessKey' -r)
    export AWS_SESSION_TOKEN=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SessionToken' -r)
    ;;
  shd_sp)
    local AWS_STS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::291876315803:role/SHD-SP-CI-NODES" --role-session-name "Terraform_Session")
    export AWS_ACCESS_KEY_ID=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.AccessKeyId' -r)
    export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SecretAccessKey' -r)
    export AWS_SESSION_TOKEN=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SessionToken' -r)
    ;;
  shd_us)
    local AWS_STS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::291876315803:role/SHD-US-CI-NODES" --role-session-name "Terraform_Session")
    export AWS_ACCESS_KEY_ID=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.AccessKeyId' -r)
    export AWS_SECRET_ACCESS_KEY=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SecretAccessKey' -r)
    export AWS_SESSION_TOKEN=$(echo $AWS_STS_CREDENTIALS | jq '.Credentials.SessionToken' -r)
    ;;
  *)
    echo "Ambiente inválido: $1"
    echo "Ambientes disponíveis: dev, uat, stress, prd"
    exit 1
    ;;
esac